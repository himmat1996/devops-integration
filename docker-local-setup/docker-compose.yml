version: '3.1'
networks:
  es-net:
    driver: bridge
services:
  consul:
    container_name: consul
    image: bitnami/consul:latest
    restart: always
    volumes:
      - './consul_data:/bitnami/consul'
      - './Centralization-Configuration-Consul:/consul/Centralization-Configuration-Consul'
    ports:
      - '8500:8500'
    command: |
      sh -c 'set -uex; \
      consul agent -dev -ui -client 0.0.0.0 & \
      sleep 20 && \
      consul kv import @/consul/Centralization-Configuration-Consul/local.json && \
        tail -f /dev/null'

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      
  kafka:
    image: docker.io/bitnami/kafka:3.1
    container_name: kafka
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_HOST://localhost:29092
    depends_on:
      - zookeeper

  redis:
    container_name: redis
    image: 'bitnami/redis:latest'
    ports:
      - "6379:6379"
    environment:
      - REDIS_REPLICATION_MODE=master
      - REDIS_PASSWORD=hello@123
    restart: always

  db:
    image: postgres:14.1-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgress
      - POSTGRES_DB=dit
    ports:
      - "5433:5432"
    volumes:
      - './volumes/pgdata:/var/lib/postgresql/data1'
  elasticsearch:
    container_name: es-container
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.0
    environment:
      - xpack.security.enabled=false
      - "discovery.type=single-node"
    networks:
      - es-net
    ports:
      - 9200:9200
  kibana:
    container_name: kb-container
    image: docker.elastic.co/kibana/kibana:7.11.0
    environment:
      - ELASTICSEARCH_HOSTS=http://es-container:9200
    networks:
      - es-net
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601
  mongo:
    container_name: mongo-service
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - '27017:27017'
    volumes:
      - '/local/mongo:/data/db'
  mongo-express:
    container_name: mongo-express-service
    image: mongo-express
    restart: always
    ports:
      - 8081:8089
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
  vernemq:
    image: emqx/emqx:5.0.26
    container_name: vernemq
    restart: always
    environment:
      DOCKER_VERNEMQ_ALLOW_ANONYMOUS: 'off'
    ports:
      - 1883:1883
      - 8888:8888
    expose:
      - 1883
  jenkins:
    image: jenkins/jenkins:lts
    privileged: true
    user: root
    ports:
      - 8081:8082
      - 50000:50000
    container_name: jenkins
    volumes:
      - ~/jenkins:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/local/bin/docker:/usr/local/bin/docker
volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local